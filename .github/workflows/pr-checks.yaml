name: PR Checks

# PR Checks run on all PRs to the main branch and must pass before merging.
on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - main

jobs:
  prettier-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - uses: actions/cache@v4
        id: root-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-root-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install root dependencies
        if: steps.root-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Check code formatting with Prettier
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" --ignore-path .gitignore --ignore-path .prettierignore

  core-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup packages
        uses: ./.github/actions/setup-packages
      - name: Setup core component
        uses: ./.github/actions/setup-component
        with:
          component: core
          include-root: true

      - name: Type check and lint
        run: |
          cd core
          npx tsc --noEmit
          npm run lint
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Run tests
        run: |
          cd core
          npm test
          npm run vitest
        env:
          IGNORE_API_KEY_TESTS: ${{ github.event.pull_request.head.repo.fork == true || github.actor == 'dependabot[bot]' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_FOUNDRY_CODESTRAL_API_KEY: ${{ secrets.AZURE_FOUNDRY_CODESTRAL_API_KEY }}
          AZURE_FOUNDRY_MISTRAL_SMALL_API_KEY: ${{ secrets.AZURE_FOUNDRY_MISTRAL_SMALL_API_KEY }}
          AZURE_OPENAI_GPT41_API_KEY: ${{ secrets.AZURE_OPENAI_GPT41_API_KEY }}

  gui-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup packages
        uses: ./.github/actions/setup-packages
      - name: Setup core component
        uses: ./.github/actions/setup-component
        with:
          component: core
          include-root: true
      - name: Setup gui component
        uses: ./.github/actions/setup-component
        with:
          component: gui
          include-packages: false
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Type check and lint
        run: |
          cd gui
          npx tsc --noEmit
          npm run lint

      - name: Run tests
        run: |
          cd gui
          npm test

  binary-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup packages
        uses: ./.github/actions/setup-packages
      - name: Setup core component
        uses: ./.github/actions/setup-component
        with:
          component: core
          include-root: true
      - name: Setup binary component
        uses: ./.github/actions/setup-component
        with:
          component: binary
          include-packages: false

      - name: Type check
        run: |
          cd binary
          npx tsc --noEmit

  vscode-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup packages
        uses: ./.github/actions/setup-packages
      - name: Setup core component
        uses: ./.github/actions/setup-component
        with:
          component: core
          include-root: true
      - name: Setup vscode component
        uses: ./.github/actions/setup-component
        with:
          component: vscode
          include-packages: false
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Type check and lint
        run: |
          cd extensions/vscode
          npm run write-build-timestamp
          npx tsc --noEmit
          npm run lint

      - name: Run vitest tests
        run: |
          cd extensions/vscode
          npm run vitest

  get-packages-matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v5
      - name: Get package list
        id: get-packages
        run: |
          packages=$(find packages/ -maxdepth 1 -type d -not -path packages/ -exec basename {} \; | sort | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$packages" >> $GITHUB_OUTPUT
          echo "Found packages: $packages"

  packages-checks:
    needs: get-packages-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.get-packages-matrix.outputs.packages) }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup packages
        uses: ./.github/actions/setup-packages

      - name: Test and check ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          npm ci
          npm test
        env:
          IGNORE_API_KEY_TESTS: ${{ github.event.pull_request.head.repo.fork == true || github.actor == 'dependabot[bot]' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_FOUNDRY_CODESTRAL_API_KEY: ${{ secrets.AZURE_FOUNDRY_CODESTRAL_API_KEY }}
          AZURE_FOUNDRY_MISTRAL_SMALL_API_KEY: ${{ secrets.AZURE_FOUNDRY_MISTRAL_SMALL_API_KEY }}
          AZURE_OPENAI_GPT41_API_KEY: ${{ secrets.AZURE_OPENAI_GPT41_API_KEY }}
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}

  vscode-e2e-tests:
    uses: ./.github/workflows/e2e-tests.yml
    with:
      is_fork: ${{ github.event.pull_request.head.repo.fork == true || github.actor == 'dependabot[bot]' }}
    secrets:
      CI_GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_ACTIONS_SSH_TEST_KEY_PEM: ${{ secrets.GH_ACTIONS_SSH_TEST_KEY_PEM }}
      GH_ACTIONS_SSH_TEST_DNS_NAME: ${{ secrets.GH_ACTIONS_SSH_TEST_DNS_NAME }}

  jetbrains-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      - name: Run JetBrains tests
        uses: ./.github/actions/run-jetbrains-tests
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ci-github-token: ${{ secrets.CI_GITHUB_TOKEN }}

  # GitHub does not have a way of requiring that all checks pass (you must manually select each job)
  # This action at least lets us manage the list of required tests via source control
  pr-review-action-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache PR review action node modules
        uses: actions/cache@v4
        id: pr-review-cache
        with:
          path: actions/detailed-review/node_modules
          key: ${{ runner.os }}-pr-review-action-${{ hashFiles('actions/detailed-review/package.json') }}

      - name: Install dependencies
        if: steps.pr-review-cache.outputs.cache-hit != 'true'
        run: |
          cd actions/detailed-review
          npm install

      - name: Run tests
        run: |
          cd actions/detailed-review
          npm test

  # so that creators of new jobs can add them to this list
  require-all-checks-to-pass:
    if: always()
    runs-on: ubuntu-latest
    needs:
      - prettier-check
      - core-checks
      - gui-checks
      - binary-checks
      - vscode-checks
      - get-packages-matrix
      - packages-checks
      - vscode-e2e-tests
      - jetbrains-tests
      - pr-review-action-tests

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
