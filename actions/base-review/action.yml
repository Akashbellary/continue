name: "Continue Base Review"
description: "Zero-config AI code review - just add this action and optionally an API key"
author: "Continue Dev, Inc."

inputs:
  continue-api-key:
    description: "API key for Continue service (required)"
    required: true
  use_github_app:
    description: "Use GitHub App for bot identity (defaults to true)"
    default: "true"
    required: false
  continue-org:
    description: "Organization for Continue config (optional)"
    required: false
    default: "continuedev"
  continue-config:
    description: "Config path to use (optional)"
    required: false
    default: "continuedev/review-bot"
  app-id:
    description: "GitHub App ID (optional, defaults to Continue Agent app)"
    required: false
    default: "1090372" # Continue Agent App ID
  app-private-key:
    description: "GitHub App Private Key (optional, defaults to repository secret)"
    required: false

runs:
  using: "composite"
  steps:
    - name: Check trigger
      id: check
      shell: bash
      run: |
        # Determine if we should run based on event type
        SHOULD_RUN="false"
        REVIEW_TYPE="general"
        CUSTOM_PROMPT=""

        if [ "${{ github.event_name }}" = "pull_request" ]; then
          if [ "${{ github.event.pull_request.draft }}" != "true" ]; then
            SHOULD_RUN="true"
          fi
        elif [ "${{ github.event_name }}" = "issue_comment" ]; then
          if [ "${{ github.event.issue.pull_request }}" != "" ]; then
            # Safely handle comment body to prevent injection
            COMMENT_FILE=$(mktemp)
            cat > "$COMMENT_FILE" << 'END_COMMENT'
        ${{ github.event.comment.body }}
        END_COMMENT
            
            # Check for @continue-agent mention
            if grep -qi "@continue-agent" "$COMMENT_FILE"; then
              SHOULD_RUN="true"
              
              # Extract custom prompt after @continue-agent (if any)
              # This sanitizes the input by reading it as data, not executing it
              CUSTOM_PROMPT=$(grep -i "@continue-agent" "$COMMENT_FILE" | sed 's/.*@continue-agent\s*//i' | head -1)
              
              # Check for review type keywords in the full comment
              if grep -qi "detailed" "$COMMENT_FILE"; then
                REVIEW_TYPE="detailed"
              fi
            fi
            
            rm -f "$COMMENT_FILE"
          fi
        fi

        # Write outputs safely
        echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
        echo "review_type=$REVIEW_TYPE" >> $GITHUB_OUTPUT
        
        # Save custom prompt to a file to avoid issues with special characters
        if [ -n "$CUSTOM_PROMPT" ]; then
          echo "$CUSTOM_PROMPT" > custom_prompt.txt
          echo "has_custom_prompt=true" >> $GITHUB_OUTPUT
        else
          echo "has_custom_prompt=false" >> $GITHUB_OUTPUT
        fi

        # Debug output
        echo "Event: ${{ github.event_name }}"
        echo "Should run: $SHOULD_RUN"
        echo "Review type: $REVIEW_TYPE"
        echo "Has custom prompt: $([ -n "$CUSTOM_PROMPT" ] && echo "yes" || echo "no")"

    - name: Generate GitHub App Token
      if: steps.check.outputs.should_run == 'true' && inputs.use_github_app == 'true'
      id: app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ inputs.app-id || secrets.CONTINUE_APP_ID || '1090372' }}
        private-key: ${{ inputs.app-private-key || secrets.CONTINUE_APP_PRIVATE_KEY }}
      continue-on-error: true

    - name: Comment on App Installation
      if: steps.check.outputs.should_run == 'true' && inputs.use_github_app == 'true' && steps.app-token.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const prNumber = context.payload.pull_request?.number || context.payload.issue?.number;
          if (prNumber) {
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ¤– Continue Agent Setup\n\nI noticed the Continue Agent GitHub App isn't installed on this repository.\n\n**To enable AI-powered code reviews with proper bot identity:**\n\n1. ðŸ“± [Install the Continue Agent app](https://github.com/apps/continue-agent)\n2. âœ… Grant it access to this repository\n3. ðŸ”„ Re-run this workflow or comment \`@continue-agent\` to trigger a new review\n\n**Benefits of using the app:**\n- Reviews appear from the Continue Agent bot instead of github-actions\n- Better formatting and threading of review comments\n- Enhanced permissions for code analysis\n\n*Note: Reviews will still work without the app, but with limited features.*`
            });
          }

    - name: Validate GitHub App Credentials
      if: steps.check.outputs.should_run == 'true' && inputs.use_github_app == 'true'
      shell: bash
      run: |
        # Validate that both app-id and app-private-key are provided together
        if [ -n "${{ inputs.app-private-key }}" ] && [ -z "${{ inputs.app-id }}" ]; then
          echo "::warning::app-private-key provided without app-id. Both are required for GitHub App authentication."
        elif [ -n "${{ inputs.app-id }}" ] && [ -z "${{ inputs.app-private-key }}" ] && [ -z "${{ secrets.CONTINUE_APP_PRIVATE_KEY }}" ]; then
          echo "::warning::app-id provided without app-private-key. Both are required for GitHub App authentication."
        fi

    - name: Check Authorization
      if: steps.check.outputs.should_run == 'true'
      shell: bash
      run: |
        # Check user permissions for PR or comment events
        AUTHORIZED="false"
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          AUTHOR_ASSOC="${{ github.event.pull_request.author_association }}"
          if [ "$AUTHOR_ASSOC" = "OWNER" ] || [ "$AUTHOR_ASSOC" = "MEMBER" ] || [ "$AUTHOR_ASSOC" = "COLLABORATOR" ]; then
            AUTHORIZED="true"
          else
            echo "::notice::Skipping review - PR author is not a team member (association: $AUTHOR_ASSOC)"
          fi
        elif [ "${{ github.event_name }}" = "issue_comment" ]; then
          COMMENTER_ASSOC="${{ github.event.comment.author_association }}"
          if [ "$COMMENTER_ASSOC" = "OWNER" ] || [ "$COMMENTER_ASSOC" = "MEMBER" ] || [ "$COMMENTER_ASSOC" = "COLLABORATOR" ]; then
            AUTHORIZED="true"
          else
            echo "::notice::Skipping review - Commenter is not a team member (association: $COMMENTER_ASSOC)"
          fi
        fi
        
        if [ "$AUTHORIZED" != "true" ]; then
          echo "should_run=false" >> $GITHUB_OUTPUT
          exit 0
        fi

    - name: Pass Custom Prompt to Review
      if: steps.check.outputs.should_run == 'true' && steps.check.outputs.has_custom_prompt == 'true'
      shell: bash
      run: |
        # Append custom prompt to the review configuration
        # This will be picked up by the detailed-review action
        echo "CUSTOM_REVIEW_PROMPT<<EOF" >> $GITHUB_ENV
        cat custom_prompt.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Run Continue Detailed Review
      if: steps.check.outputs.should_run == 'true'
      uses: continuedev/continue/actions/detailed-review@main
      with:
        continue-api-key: ${{ inputs.continue-api-key }}
        continue-org: ${{ inputs.continue-org }}
        continue-config: ${{ inputs.continue-config }}
        use_github_app: ${{ inputs.use_github_app }}
        app-id: ${{ inputs.app-id }}
        app-private-key: ${{ inputs.app-private-key }}
        github-token: ${{ steps.app-token.outputs.token || github.token }}

branding:
  icon: "code"
  color: "blue"
